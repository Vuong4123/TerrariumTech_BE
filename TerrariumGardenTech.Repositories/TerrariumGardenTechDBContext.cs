// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
using TerrariumGardenTech.Common.Entity;

using TerrariumGardenTech.Common.Enums;

using static Org.BouncyCastle.Math.EC.ECCurve;

namespace TerrariumGardenTech.Repositories.Entity;

public partial class TerrariumGardenTechDBContext : DbContext
{
    public TerrariumGardenTechDBContext()
    {
    }
    public TerrariumGardenTechDBContext(DbContextOptions<TerrariumGardenTechDBContext> options)
        : base(options)
    {
    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        if (!optionsBuilder.IsConfigured)
        {
            optionsBuilder.UseSqlServer(GetConnectionString());
        }
    }

    private string GetConnectionString()
    {
        IConfiguration configuration = new ConfigurationBuilder()
                .SetBasePath(Directory.GetCurrentDirectory())
                .AddJsonFile("appsettings.json", true, true).AddEnvironmentVariables().Build();
        return configuration.GetConnectionString("DefaultConnectionString");
    }

    public virtual DbSet<Accessory> Accessories { get; set; }

    public virtual DbSet<AccessoryImage> AccessoryImages { get; set; }


    public virtual DbSet<Address> Addresses { get; set; }


    public virtual DbSet<AisuggestLayout> AisuggestLayouts { get; set; }

    public virtual DbSet<Blog> Blogs { get; set; }

    public virtual DbSet<BlogCategory> BlogCategories { get; set; }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<Feedback> Feedbacks { get; set; }

    public virtual DbSet<FeedbackImage> FeedbackImages { get; set; }

    public virtual DbSet<LayoutTerrarium> LayoutTerraria { get; set; }

    public virtual DbSet<Membership> Memberships { get; set; }

    public virtual DbSet<Notification> Notifications { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<OrderItem> OrderItems { get; set; }

    public virtual DbSet<Payment> Payments { get; set; }

    public virtual DbSet<Personalize> Personalizes { get; set; }

    public virtual DbSet<Promotion> Promotions { get; set; }

    public virtual DbSet<PromotionTerrariumVariant> PromotionTerrariumVariants { get; set; }

    public virtual DbSet<ReturnExchangeRequest> ReturnExchangeRequests { get; set; }

    public virtual DbSet<ReturnExchangeRequestItem> ReturnExchangeRequestItems { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Terrarium> Terrariums { get; set; }

    public virtual DbSet<TerrariumImage> TerrariumImages { get; set; }

    public virtual DbSet<TerrariumVariant> TerrariumVariants { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<Voucher> Vouchers { get; set; }
    public virtual DbSet<TankMethod> TankMethods { get; set; }

    public virtual DbSet<Shape> Shapes { get; set; }
    public virtual DbSet<TerrariumAccessory> TerrariumAccessory { get; set; }
    public virtual DbSet<EnvironmentTerrarium> Environments { get; set; }
    public DbSet<Cart> Carts { get; set; }
    public DbSet<CartItem> CartItems { get; set; }
    public DbSet<TransportLog> TransportLogs { get; set; }
    public DbSet<OrderTransport> OrderTransports { get; set; }
    public DbSet<OrderRequestRefund> OrderRequestRefunds { get; set; }
    public virtual DbSet<Chat> Chats { get; set; }
    public virtual DbSet<ChatMessage> ChatMessages { get; set; }
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Accessory>(entity =>
        {
            entity.HasKey(e => e.AccessoryId).HasName("PK__Accessor__77E65FD722D6ED59");

            entity.ToTable("Accessory");

            entity.Property(e => e.AccessoryId).HasColumnName("accessoryId");
            entity.Property(e => e.CategoryId).HasColumnName("categoryId");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasColumnName("createdAt");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .HasColumnName("name");
            entity.Property(e => e.Price)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("price");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20)
                .HasDefaultValue("Available")
                .HasColumnName("status");
            entity.Property(e => e.StockQuantity).HasColumnName("stockQuantity");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasColumnName("updatedAt");

            entity.HasOne(d => d.Category).WithMany(p => p.Accessories)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Accessory_Category");
        });

        modelBuilder.Entity<AccessoryImage>(entity =>
        {
            entity.HasKey(e => e.AccessoryImageId).HasName("PK__Accessor__FC8A6368CD989764");

            entity.ToTable("AccessoryImage");

            entity.Property(e => e.AccessoryImageId).HasColumnName("accessoryImageId");
            entity.Property(e => e.AccessoryId).HasColumnName("accessoryId");
            entity.Property(e => e.ImageUrl)
                .HasMaxLength(255)
                .HasColumnName("imageUrl");

            entity.HasOne(d => d.Accessory).WithMany(p => p.AccessoryImages)
                .HasForeignKey(d => d.AccessoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AccessoryImage_Accessory");
        });

        //modelBuilder.Entity<Address>(entity =>
        //{
        //    entity.HasKey(e => e.AddressId).HasName("PK__Address__26A111ADDFE0EDC0");

        //    entity.ToTable("Address");

        //    entity.Property(e => e.AddressId).HasColumnName("addressId");
        //    entity.Property(e => e.AddressLine1)
        //        .HasMaxLength(255)
        //        .HasColumnName("addressLine1");
        //    entity.Property(e => e.AddressLine2)
        //        .HasMaxLength(255)
        //        .HasColumnName("addressLine2");
        //    entity.Property(e => e.City)
        //        .HasMaxLength(100)
        //        .HasColumnName("city");
        //    entity.Property(e => e.Country)
        //        .HasMaxLength(100)
        //        .HasColumnName("country");
        //    entity.Property(e => e.PostalCode)
        //        .HasMaxLength(20)
        //        .HasColumnName("postalCode");
        //    entity.Property(e => e.State)
        //        .HasMaxLength(100)
        //        .HasColumnName("state");
        //    entity.Property(e => e.UserId).HasColumnName("userId");

        //    entity.HasOne(d => d.User).WithMany(p => p.Addresses)
        //        .HasForeignKey(d => d.UserId)
        //        .OnDelete(DeleteBehavior.ClientSetNull)
        //        .HasConstraintName("FK_Address_User");
        //});
        modelBuilder.Entity<Address>(entity =>
        {
            entity.HasKey(e => e.AddressId).HasName("PK_Address");

            entity.ToTable("Address");

            entity.Property(e => e.AddressId).HasColumnName("id");

            entity.Property(e => e.TagName)
                .HasMaxLength(250)
                .HasColumnName("tagName");

            entity.Property(e => e.UserId).HasColumnName("userId");

            entity.Property(e => e.ReceiverName)
                .HasMaxLength(250)
                .HasColumnName("receiverName");

            entity.Property(e => e.ReceiverPhone)
                .HasMaxLength(250)
                .HasColumnName("receiverPhone");

            entity.Property(e => e.ReceiverAddress)
                .HasMaxLength(250)
                .HasColumnName("receiverAddress");
            entity.HasOne(d => d.User)
                .WithMany(p => p.Addresses)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Address_User");
        });
        //modelBuilder.Entity<AddressDelivery>(entity =>
        //{
        //    entity.HasKey(e => e.AddressDeliveryId).HasName("PK_AddressDelivery");

        //    entity.ToTable("AddressDelivery");

        //    entity.Property(e => e.AddressDeliveryId).HasColumnName("id");

        //    entity.Property(e => e.OrderId)
        //        .HasColumnName("orderId");

        //    entity.Property(e => e.ReceiverName)
        //        .HasMaxLength(250)
        //        .HasColumnName("receiverName");

        //    entity.Property(e => e.ReceiverPhone)
        //        .HasMaxLength(250)
        //        .HasColumnName("receiverPhone");

        //    entity.Property(e => e.ReceiverAddress)
        //        .HasMaxLength(250)
        //        .HasColumnName("receiverAddress");

        //    //entity.Property(e => e.Longitude)
        //    //    .HasColumnType("numeric(9,6)")
        //    //    .HasColumnName("longitude");

        //    //entity.Property(e => e.Latitude)
        //    //    .HasColumnType("numeric(9,6)")
        //    //    .HasColumnName("latitude");

        //    //entity.Property(e => e.WardId).HasColumnName("wardId");

        //    entity.Property(e => e.UserId).HasColumnName("userId");

        //    entity.Property(e => e.CreatedOnUtc)
        //        .HasColumnType("datetime2")
        //        .HasColumnName("createdOnUtc");

        //    entity.Property(e => e.ModifiedOnUtc)
        //        .HasColumnType("datetime2")
        //        .HasColumnName("modifiedOnUtc");

        //    entity.Property(e => e.IsDeleted)
        //        .HasColumnName("isDeleted");

        //    entity.HasOne(d => d.Order)
        //        .WithMany(p => p.AddressDeliveries)
        //        .HasForeignKey(d => d.OrderId)
        //        .HasConstraintName("FK_AddressDelivery_Order");
        //});

        //modelBuilder.Entity<AddressDelivery>(entity =>
        //{
        //    entity.HasKey(e => e.AddressDeliveryId).HasName("PK__AddressD__F090623D8858B94B");

        //    entity.ToTable("AddressDelivery");

        //    entity.Property(e => e.AddressDeliveryId).HasColumnName("addressDeliveryId");
        //    entity.Property(e => e.AddressLine1)
        //        .HasMaxLength(255)
        //        .HasColumnName("addressLine1");
        //    entity.Property(e => e.AddressLine2)
        //        .HasMaxLength(255)
        //        .HasColumnName("addressLine2");
        //    entity.Property(e => e.City)
        //        .HasMaxLength(100)
        //        .HasColumnName("city");
        //    entity.Property(e => e.Country)
        //        .HasMaxLength(100)
        //        .HasColumnName("country");
        //    entity.Property(e => e.OrderId).HasColumnName("orderId");
        //    entity.Property(e => e.PhoneNumber)
        //        .HasMaxLength(15)
        //        .HasColumnName("phoneNumber");
        //    entity.Property(e => e.PostalCode)
        //        .HasMaxLength(20)
        //        .HasColumnName("postalCode");
        //    entity.Property(e => e.RecipientName)
        //        .HasMaxLength(100)
        //        .HasColumnName("recipientName");
        //    entity.Property(e => e.State)
        //        .HasMaxLength(100)
        //        .HasColumnName("state");

        //    entity.HasOne(d => d.Order).WithMany(p => p.AddressDeliveries)
        //        .HasForeignKey(d => d.OrderId)
        //        .OnDelete(DeleteBehavior.ClientSetNull)
        //        .HasConstraintName("FK_AddressDelivery_Order");
        //});

        modelBuilder.Entity<AisuggestLayout>(entity =>
        {
            entity.HasKey(e => e.LayoutId).HasName("PK__AISugges__023A37EFFA219D01");


            entity.ToTable("AISuggestLayout");

            entity.Property(e => e.LayoutId).HasColumnName("layoutId");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasColumnName("createdAt");
            entity.Property(e => e.LayoutData).HasColumnName("layoutData");
            entity.Property(e => e.UserId).HasColumnName("userId");


            entity.HasOne(d => d.User).WithMany(p => p.AisuggestLayouts)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AISuggestLayout_User");
        });

        modelBuilder.Entity<Blog>(entity =>
        {
            entity.HasKey(e => e.BlogId).HasName("PK__Blog__FA0AA72DCF7A4E3E");

            entity.ToTable("Blog");

            entity.Property(e => e.BlogId).HasColumnName("blogId");
            entity.Property(e => e.BlogCategoryId).HasColumnName("blogCategoryId");
            entity.Property(e => e.Content).HasColumnName("content");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasColumnName("createdAt");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasDefaultValue("draft")
                .HasColumnName("status");
            entity.Property(e => e.Title)
                .HasMaxLength(150)
                .HasColumnName("title");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasColumnName("updatedAt");
            entity.Property(e => e.UserId).HasColumnName("userId");

            entity.HasOne(d => d.BlogCategory).WithMany(p => p.Blogs)
                .HasForeignKey(d => d.BlogCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Blog_BlogCategory");

            entity.HasOne(d => d.User).WithMany(p => p.Blogs)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Blog_User");
        });

        modelBuilder.Entity<BlogCategory>(entity =>
        {
            entity.HasKey(e => e.BlogCategoryId).HasName("PK__BlogCate__60848B8FC9999236");

            entity.ToTable("BlogCategory");

            entity.Property(e => e.BlogCategoryId).HasColumnName("blogCategoryId");
            entity.Property(e => e.CategoryName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("categoryName");
            entity.Property(e => e.Description).HasColumnName("description");
        });

        modelBuilder.Entity<Category>(entity =>
        {
            entity.HasKey(e => e.CategoryId).HasName("PK__Category__23CAF1D819300390");

            entity.ToTable("Category");

            entity.Property(e => e.CategoryId).HasColumnName("categoryId");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.CategoryName)
                .HasMaxLength(100)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Feedback>(entity =>
        {
            entity.HasKey(e => e.FeedbackId).HasName("PK__Feedback__2613FD244B84BCD6");

            entity.ToTable("Feedback");

            entity.Property(e => e.FeedbackId).HasColumnName("feedbackId");
            entity.Property(e => e.Comment).HasColumnName("comment");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasColumnName("createdAt");
            entity.Property(e => e.OrderItemId).HasColumnName("orderItemId");
            entity.Property(e => e.Rating).HasColumnName("rating");
            entity.Property(e => e.UserId).HasColumnName("userId");

            entity.HasOne(d => d.OrderItem).WithMany(p => p.Feedbacks)
                .HasForeignKey(d => d.OrderItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Feedback_OrderItem");

            entity.HasOne(d => d.User).WithMany(p => p.Feedbacks)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Feedback_User");
        });



        modelBuilder.Entity<FeedbackImage>(entity =>
        {
            entity.HasKey(e => e.FeedbackImageId).HasName("PK__Feedback__5C1F8F3456C39EF3");

            entity.ToTable("FeedbackImage");

            entity.Property(e => e.FeedbackImageId).HasColumnName("feedbackImageId");
            entity.Property(e => e.FeedbackId).HasColumnName("feedbackId");
            entity.Property(e => e.ImageUrl)
                .HasMaxLength(255)
                .HasColumnName("imageUrl");

            entity.HasOne(d => d.Feedback).WithMany(p => p.FeedbackImages)
                .HasForeignKey(d => d.FeedbackId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FeedbackImage_Feedback");
        });

        modelBuilder.Entity<LayoutTerrarium>(entity =>
        {
            entity.HasKey(e => e.LayoutTerrariumId).HasName("PK__LayoutTe__ED2AF5EA0034035F");

            entity.ToTable("LayoutTerrarium");

            entity.Property(e => e.LayoutTerrariumId).HasColumnName("layoutTerrariumId");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasColumnName("createdAt");
            entity.Property(e => e.LayoutData).HasColumnName("layoutData");
            entity.Property(e => e.TerrariumVariantId).HasColumnName("terrariumVariantId");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasColumnName("updatedAt");

            entity.HasOne(d => d.TerrariumVariant).WithMany(p => p.LayoutTerrarium)
                .HasForeignKey(d => d.TerrariumVariantId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LayoutTerrarium_TerrariumVariant");
        });

        //modelBuilder.Entity<Membership>(entity =>
        //{
        //    entity.HasKey(e => e.MembershipId).HasName("PK__Membersh__86AA3B174168331C");

        //    entity.ToTable("Membership");

        //    entity.Property(e => e.MembershipId).HasColumnName("membershipId");
        //    entity.Property(e => e.EndDate)
        //        .HasColumnType("date")
        //        .HasColumnName("endDate");
        //    entity.Property(e => e.MembershipType)
        //        .HasMaxLength(50)
        //        .HasColumnName("membershipType");
        //    entity.Property(e => e.StartDate)
        //        .HasColumnType("date")
        //        .HasColumnName("startDate");
        //    entity.Property(e => e.Status)
        //        .HasMaxLength(20)
        //        .HasDefaultValue("active")
        //        .HasColumnName("status");
        //    entity.Property(e => e.UserId).HasColumnName("userId");

        //    entity.HasOne(d => d.User).WithMany(p => p.Memberships)
        //        .HasForeignKey(d => d.UserId)
        //        .OnDelete(DeleteBehavior.ClientSetNull)
        //        .HasConstraintName("FK_Membership_User");
        //});

        modelBuilder.Entity<Notification>(entity =>
        {
            entity.HasKey(e => e.NotificationId).HasName("PK__Notifica__4BA5CEA92CE3E468");

            entity.ToTable("Notification");

            entity.Property(e => e.NotificationId).HasColumnName("notificationId");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasColumnName("createdAt");
            entity.Property(e => e.IsRead)
                .HasDefaultValue(false)
                .HasColumnName("isRead");
            entity.Property(e => e.Message).HasColumnName("message");
            entity.Property(e => e.Title)
                .HasMaxLength(100)
                .HasColumnName("title");
            entity.Property(e => e.UserId).HasColumnName("userId");

            entity.HasOne(d => d.User).WithMany(p => p.Notifications)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Notification_User");
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.HasKey(e => e.OrderId).HasName("PK__Order__0809335D04D87A58");

            entity.ToTable("Order");


            entity.Property(e => e.OrderId)
              .HasColumnName("orderId");

            entity.Property(e => e.Deposit)
                  .HasDefaultValue(0.00m)
                  .HasColumnType("decimal(12, 2)")
                  .HasColumnName("deposit");

            entity.Property(e => e.OrderDate)
                  .HasDefaultValueSql("(sysutcdatetime())")
                  .HasColumnName("orderDate");

            entity.Property(e => e.PaymentStatus)
                .HasMaxLength(20)
                .HasDefaultValue("pending")
                .HasColumnName("paymentStatus");
            entity.Property(e => e.Status).IsRequired()
                .HasConversion(new ValueConverter<OrderStatusEnum, string>(
                    v => v.ToString(), 
                    v => (OrderStatusEnum)Enum.Parse(typeof(OrderStatusEnum), v)
                )).HasMaxLength(50)
                .HasColumnName("status");
            entity.Property(e => e.TotalAmount)
                  .HasColumnType("decimal(12, 2)")
                  .HasColumnName("totalAmount");

            entity.Property(e => e.UserId)
                  .HasColumnName("userId");

            entity.Property(e => e.VoucherId)
                  .HasColumnName("voucherId");

            entity.HasOne(d => d.User)
                  .WithMany(p => p.Orders)
                  .HasForeignKey(d => d.UserId)
                  .OnDelete(DeleteBehavior.ClientSetNull)
                  .HasConstraintName("FK_Order_User");

            entity.HasOne(d => d.Voucher)
                  .WithMany(p => p.Orders)
                  .HasForeignKey(d => d.VoucherId)
                  .HasConstraintName("FK_Order_Voucher");
        });

        modelBuilder.Entity<OrderItem>(entity =>
        {
            entity.HasKey(e => e.OrderItemId).HasName("PK__OrderIte__3724BD5293DBCE99");

            entity.ToTable("OrderItem");

            entity.Property(e => e.OrderItemId).HasColumnName("orderItemId");
            entity.Property(e => e.AccessoryId).HasColumnName("accessoryId");
            entity.Property(e => e.OrderId).HasColumnName("orderId");
            entity.Property(e => e.Quantity).HasColumnName("quantity");
            entity.Property(e => e.TerrariumVariantId).HasColumnName("terrariumVariantId");
            entity.Property(e => e.TotalPrice)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("totalPrice");
            entity.Property(e => e.UnitPrice)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("unitPrice");

            entity.HasOne(d => d.Accessory).WithMany(p => p.OrderItems)
                .HasForeignKey(d => d.AccessoryId)
                .HasConstraintName("FK_OrderItem_Accessory");

            entity.HasOne(d => d.Order).WithMany(p => p.OrderItems)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderItem_Order");

            entity.HasOne(d => d.TerrariumVariant).WithMany(p => p.OrderItems)
                .HasForeignKey(d => d.TerrariumVariantId)
                .HasConstraintName("FK_OrderItem_TerrariumVariant");
        });

        //modelBuilder.Entity<OrderItemDetail>(entity =>
        //{
        //    entity.HasKey(e => e.OrderItemDetailId).HasName("PK__OrderIte__098BB1314F361970");

        //    entity.ToTable("OrderItemDetail");

        //    entity.Property(e => e.OrderItemDetailId).HasColumnName("orderItemDetailId");
        //    entity.Property(e => e.DetailKey)
        //        .HasMaxLength(100)
        //        .HasColumnName("detailKey");
        //    entity.Property(e => e.DetailValue).HasColumnName("detailValue");
        //    entity.Property(e => e.OrderItemId).HasColumnName("orderItemId");

        //    entity.HasOne(d => d.OrderItem).WithMany(p => p.OrderItemDetails)
        //        .HasForeignKey(d => d.OrderItemId)
        //        .OnDelete(DeleteBehavior.ClientSetNull)
        //        .HasConstraintName("FK_OrderItemDetail_OrderItem");
        //});

        modelBuilder.Entity<Payment>(entity =>
        {
            entity.HasKey(e => e.PaymentId).HasName("PK__PaymentT__A0D9EFC6B78D0C95");

            entity.ToTable("Payment");

            entity.Property(e => e.PaymentId).HasColumnName("paymentId");
            entity.Property(e => e.OrderId).HasColumnName("orderId");
            entity.Property(e => e.PaymentAmount)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("paymentAmount");
            entity.Property(e => e.PaymentDate)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasColumnName("paymentDate");
            entity.Property(e => e.PaymentMethod)
                .HasMaxLength(50)
                .HasColumnName("paymentMethod");
            entity.Property(e => e.Status)

        .HasConversion<string>()               // lưu enum dưới dạng chuỗi
        .HasMaxLength(20)
        .HasDefaultValue(OrderStatus.Pending) // default là enum, EF sẽ convert thành "Pending"
        .HasColumnName("status");


            entity.HasOne(d => d.Order).WithMany(p => p.Payment)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PaymentTransition_Order");
        });

        //modelBuilder.Entity<Personalize>(entity =>
        //{
        //    entity.HasKey(e => e.PersonalizeId).HasName("PK__Personal__8032E374C56CF71E");

        //    entity.ToTable("Personalize");

        //    entity.Property(e => e.PersonalizeId).HasColumnName("personalizeId");
        //    entity.Property(e => e.Language)
        //        .HasMaxLength(20)
        //        .HasColumnName("language");
        //    entity.Property(e => e.Preferences).HasColumnName("preferences");
        //    entity.Property(e => e.Theme)
        //        .HasMaxLength(50)
        //        .HasColumnName("theme");
        //    entity.Property(e => e.UserId).HasColumnName("userId");

        //    entity.HasOne(d => d.User).WithMany(p => p.Personalizes)
        //        .HasForeignKey(d => d.UserId)
        //        .OnDelete(DeleteBehavior.ClientSetNull)
        //        .HasConstraintName("FK_Personalize_User");
        //});

        modelBuilder.Entity<Promotion>(entity =>
        {
            entity.HasKey(e => e.PromotionId).HasName("PK__Promotio__99EB696ECA1EAF5F");

            entity.ToTable("Promotion");

            entity.Property(e => e.PromotionId).HasColumnName("promotionId");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.EndDate)
                .HasColumnType("date")
                .HasColumnName("endDate");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .HasColumnName("name");
            entity.Property(e => e.StartDate)
                .HasColumnType("date")
                .HasColumnName("startDate");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasDefaultValue("active")
                .HasColumnName("status");
        });

        modelBuilder.Entity<PromotionTerrariumVariant>(entity =>
        {
            entity.HasKey(e => e.PromotionTerrariumVariantId).HasName("PK__Promotio__8F0EFF32523D8B83");

            entity.ToTable("PromotionTerrariumVariant");

            entity.Property(e => e.PromotionTerrariumVariantId).HasColumnName("promotionTerrariumVariantId");
            entity.Property(e => e.DiscountPercent)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("discountPercent");
            entity.Property(e => e.EndDate)
                .HasColumnType("date")
                .HasColumnName("endDate");
            entity.Property(e => e.PromotionId).HasColumnName("promotionId");
            entity.Property(e => e.StartDate)
                .HasColumnType("date")
                .HasColumnName("startDate");
            entity.Property(e => e.TerrariumVariantId).HasColumnName("terrariumVariantId");

            entity.HasOne(d => d.Promotion).WithMany(p => p.PromotionTerrariumVariants)
                .HasForeignKey(d => d.PromotionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PromotionTerrariumVariant_Promotion");

            entity.HasOne(d => d.TerrariumVariant).WithMany(p => p.PromotionTerrariumVariants)
                .HasForeignKey(d => d.TerrariumVariantId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PromotionTerrariumVariant_TerrariumVariant");
        });

        modelBuilder.Entity<ReturnExchangeRequest>(entity =>
        {
            entity.HasKey(e => e.RequestId).HasName("PK__ReturnEx__E3C5DE3141AB3D28");

            entity.ToTable("ReturnExchangeRequest");

            entity.Property(e => e.RequestId).HasColumnName("requestId");
            entity.Property(e => e.OrderId).HasColumnName("orderId");
            entity.Property(e => e.Reason).HasColumnName("reason");
            entity.Property(e => e.RequestDate)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasColumnName("requestDate");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasDefaultValue("pending")
                .HasColumnName("status");
            entity.Property(e => e.UserId).HasColumnName("userId");

            entity.HasOne(d => d.Order).WithMany(p => p.ReturnExchangeRequests)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReturnExchangeRequest_Order");

            entity.HasOne(d => d.User).WithMany(p => p.ReturnExchangeRequests)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReturnExchangeRequest_User");
        });

        modelBuilder.Entity<ReturnExchangeRequestItem>(entity =>
        {
            entity.HasKey(e => e.RequestItemId).HasName("PK__ReturnEx__FDD6A58FF74806E9");

            entity.ToTable("ReturnExchangeRequestItem");

            entity.Property(e => e.RequestItemId).HasColumnName("requestItemId");
            entity.Property(e => e.Notes).HasColumnName("notes");
            entity.Property(e => e.OrderItemId).HasColumnName("orderItemId");
            entity.Property(e => e.Quantity).HasColumnName("quantity");
            entity.Property(e => e.RequestId).HasColumnName("requestId");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasDefaultValue("pending")
                .HasColumnName("status");

            entity.HasOne(d => d.OrderItem).WithMany(p => p.ReturnExchangeRequestItems)
                .HasForeignKey(d => d.OrderItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReturnExchangeRequestItem_OrderItem");

            entity.HasOne(d => d.Request).WithMany(p => p.ReturnExchangeRequestItems)
                .HasForeignKey(d => d.RequestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReturnExchangeRequestItem_Request");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.RoleId).HasName("PK__Role__CD98462A2156B115");

            entity.ToTable("Role");

            entity.Property(e => e.RoleId)
                .ValueGeneratedNever()
                .HasColumnName("roleId");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("roleName");
        });

        //modelBuilder.Entity<ShippingDetail>(entity =>
        //{
        //    entity.HasKey(e => e.ShippingDetailId).HasName("PK__Shipping__DDF63975E50C620D");

        //    entity.ToTable("ShippingDetail");

        //    entity.Property(e => e.ShippingDetailId).HasColumnName("shippingDetailId");
        //    entity.Property(e => e.EstimatedDeliveryDate)
        //        .HasColumnType("date")
        //        .HasColumnName("estimatedDeliveryDate");
        //    entity.Property(e => e.OrderId).HasColumnName("orderId");
        //    entity.Property(e => e.ShippingCost)
        //        .HasColumnType("decimal(10, 2)")
        //        .HasColumnName("shippingCost");
        //    entity.Property(e => e.ShippingMethod)
        //        .HasMaxLength(50)
        //        .HasColumnName("shippingMethod");
        //    entity.Property(e => e.TrackingNumber)
        //        .HasMaxLength(100)
        //        .HasColumnName("trackingNumber");

        //    entity.HasOne(d => d.Order).WithMany(p => p.ShippingDetails)
        //        .HasForeignKey(d => d.OrderId)
        //        .OnDelete(DeleteBehavior.ClientSetNull)
        //        .HasConstraintName("FK_ShippingDetail_Order");
        //});

        // modelBuilder.Entity<Terrarium>(entity =>
        // {
        //     entity.HasKey(e => e.TerrariumId).HasName("PK__Terrariu__1AE69F91279E10EB");

        //     entity.ToTable("Terrarium");

        //     entity.Property(e => e.TerrariumId).HasColumnName("terrariumId");
        //     entity.Property(e => e.AccessoryId).HasColumnName("accessoryId");
        //     entity.Property(e => e.CreatedAt)
        //         .HasDefaultValueSql("(sysutcdatetime())")
        //         .HasColumnName("createdAt");
        //     entity.Property(e => e.Description).HasColumnName("description");
        //     entity.Property(e => e.Name)
        //         .HasMaxLength(150)
        //         .HasColumnName("name");
        //     entity.Property(e => e.Price)
        //         .HasColumnType("decimal(12, 2)")
        //         .HasColumnName("price");
        //     entity.Property(e => e.Shape)
        //         .HasMaxLength(100)
        //         .HasColumnName("shape");
        //     entity.Property(e => e.Size).HasMaxLength(20);
        //     entity.Property(e => e.Status)
        //         .HasMaxLength(20)
        //         .HasDefaultValue("Available")
        //         .HasColumnName("status");
        //     entity.Property(e => e.Stock).HasColumnName("stock");
        //     entity.Property(e => e.TankMethod)
        //         .HasMaxLength(100)
        //         .HasColumnName("tankMethod");
        //     entity.Property(e => e.Theme)
        //         .HasMaxLength(100)
        //         .HasColumnName("theme");
        //     entity.Property(e => e.Type)
        //         .HasMaxLength(100)
        //         .HasColumnName("type");
        //     entity.Property(e => e.bodyHTML)
        //         .HasMaxLength(200)
        //         .HasColumnName("bodyHTML");
        //     entity.Property(e => e.UpdatedAt)
        //         .HasDefaultValueSql("(sysutcdatetime())")
        //         .HasColumnName("updatedAt");

        //     entity.HasOne(d => d.Accessory).WithMany(p => p.Terraria)
        //         .HasForeignKey(d => d.AccessoryId)
        //         .HasConstraintName("FK_Terrarium_Accessory");
        // });

        modelBuilder.Entity<TerrariumImage>(entity =>
        {
            entity.HasKey(e => e.TerrariumImageId).HasName("PK__Terrariu__38A555784432CBBE");

            entity.ToTable("TerrariumImage");

            entity.Property(e => e.TerrariumImageId).HasColumnName("terrariumImageId");
            entity.Property(e => e.ImageUrl)
                .HasMaxLength(255)
                .HasColumnName("imageUrl");
            entity.Property(e => e.TerrariumId).HasColumnName("terrariumId");

            entity.HasOne(d => d.Terrarium).WithMany(p => p.TerrariumImages)
                .HasForeignKey(d => d.TerrariumId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TerrariumImage_Terrarium");
        });

        modelBuilder.Entity<TerrariumVariant>(entity =>
        {
            entity.HasKey(e => e.TerrariumVariantId).HasName("PK__Terrariu__B9E43448C71265AD");

            entity.ToTable("TerrariumVariant");

            entity.Property(e => e.TerrariumVariantId).HasColumnName("terrariumVariantId");
            entity.Property(e => e.Price)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("additionalPrice");
            entity.Property(e => e.StockQuantity).HasColumnName("stockQuantity");
            //entity.Property(e => e.UrlImage)
            //    .HasMaxLength(250)
            //    .HasColumnName("urlImage"); 
            entity.Property(e => e.TerrariumId).HasColumnName("terrariumId");
            entity.Property(e => e.VariantName)
                .HasMaxLength(100)
                .HasColumnName("variantName");

            entity.HasOne(d => d.Terrarium).WithMany(p => p.TerrariumVariants)
                .HasForeignKey(d => d.TerrariumId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TerrariumVariant_Terrarium");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__User__CB9A1CFFA89ED9C8");

            entity.ToTable("User");

            entity.Property(e => e.UserId).HasColumnName("userId");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasColumnName("createdAt");
            entity.Property(e => e.DateOfBirth)
                .HasColumnType("date")
                .HasColumnName("dateOfBirth");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("email");
            entity.Property(e => e.EndToken).HasColumnName("endToken");
            entity.Property(e => e.FullName).HasMaxLength(60);
            entity.Property(e => e.Gender)
                .HasMaxLength(10)
                .HasColumnName("gender");
            entity.Property(e => e.Otp).HasMaxLength(50);
            entity.Property(e => e.PasswordHash)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("passwordHash");
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(15)
                .HasColumnName("phoneNumber");
            entity.Property(e => e.RoleId).HasColumnName("roleId");
            entity.Property(e => e.StartToken).HasColumnName("startToken");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasDefaultValue("active")
                .HasColumnName("status");
            entity.Property(e => e.Token)
                .HasMaxLength(255)
                .HasColumnName("token");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasColumnName("updatedAt");
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("username");

            entity.HasOne(d => d.Role).WithMany(p => p.Users)
                .HasForeignKey(d => d.RoleId)
                .HasConstraintName("FK_User_Role");
            entity.Property(e => e.RefreshToken)
                .HasMaxLength(255)
                .HasColumnName("refreshToken");
            entity.Property(e => e.RefreshTokenExpiryDate)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasColumnName("refreshTokenExpiryDate");
        });

        modelBuilder.Entity<Voucher>(entity =>
        {
            entity.HasKey(e => e.VoucherId).HasName("PK__Voucher__F53389E9F60B1DB0");

            entity.ToTable("Voucher");

            entity.Property(e => e.VoucherId).HasColumnName("voucherId");
            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("code");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.DiscountAmount)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("discountAmount");
            entity.Property(e => e.DiscountPercent)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("discountPercent");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasDefaultValue("active")
                .HasColumnName("status");
            entity.Property(e => e.ValidFrom)
                .HasColumnType("date")
                .HasColumnName("validFrom");
            entity.Property(e => e.ValidTo)
                .HasColumnType("date")
                .HasColumnName("validTo");
        });

        modelBuilder.Entity<OrderTransport>(entity =>
        {
            entity.HasKey(e => e.TransportId);
            entity.ToTable("OrderTransport");
            entity.Property(e => e.OrderId).IsRequired();
            entity.HasOne(d => d.Order).WithMany(p => p.Transports)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderTransport_Order");
            entity.Property(e => e.Status).IsRequired()
                .HasConversion(new ValueConverter<TransportStatusEnum, string>(
                    v => v.ToString(),
                    v => (TransportStatusEnum)Enum.Parse(typeof(TransportStatusEnum), v)
                )).HasMaxLength(50);
        });

        modelBuilder.Entity<TransportLog>(entity =>
        {
            entity.HasKey(e => e.LogId);
            entity.ToTable("TransportLog");
            entity.Property(e => e.OrderTransportId).IsRequired();
            entity.HasOne(d => d.Transport).WithMany(p => p.TransportLogs)
                .HasForeignKey(d => d.OrderTransportId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TransportLog_OrderTransport");
            entity.Property(e => e.LastStatus).IsRequired()
               .HasConversion(new ValueConverter<TransportStatusEnum, string>(
                   v => v.ToString(),
                   v => (TransportStatusEnum)Enum.Parse(typeof(TransportStatusEnum), v)
               )).HasMaxLength(50);
            entity.Property(e => e.NewStatus).IsRequired()
               .HasConversion(new ValueConverter<TransportStatusEnum, string>(
                   v => v.ToString(),
                   v => (TransportStatusEnum)Enum.Parse(typeof(TransportStatusEnum), v)
               )).HasMaxLength(50);
        });

        modelBuilder.Entity<OrderRequestRefund>(entity =>
        {
            entity.HasKey(entity => entity.RequestRefundId).HasName("PK_OrderRequestRefund");
            entity.ToTable("OrderRequestRefund");
            entity.Property(e => e.OrderId).IsRequired();
            entity.HasOne(d => d.Order).WithMany(p => p.Refunds)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderRequestRefund_Order");
            entity.Property(e => e.Status).IsRequired()
               .HasConversion(new ValueConverter<RequestRefundStatusEnum, string>(
                   v => v.ToString(),
                   v => (RequestRefundStatusEnum)Enum.Parse(typeof(RequestRefundStatusEnum), v)
               )).HasMaxLength(50);
        });
        // Chat entity configuration
        modelBuilder.Entity<Chat>(entity =>
        {
            entity.HasKey(e => e.ChatId);

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("GETUTCDATE()");

            entity.Property(e => e.IsActive)
                .HasDefaultValue(true);

            // Configure relationships
            entity.HasOne(d => d.User1)
                .WithMany(p => p.ChatsAsUser1)
                .HasForeignKey(d => d.User1Id)
                .OnDelete(DeleteBehavior.Restrict);

            entity.HasOne(d => d.User2)
                .WithMany(p => p.ChatsAsUser2)
                .HasForeignKey(d => d.User2Id)
                .OnDelete(DeleteBehavior.Restrict);
        });

        // ChatMessage entity configuration
        modelBuilder.Entity<ChatMessage>(entity =>
        {
            entity.HasKey(e => e.MessageId);

            entity.Property(e => e.Content)
                .IsRequired()
                .HasMaxLength(1000);

            entity.Property(e => e.SentAt)
                .HasDefaultValueSql("GETUTCDATE()");

            entity.Property(e => e.IsRead)
                .HasDefaultValue(false);

            entity.Property(e => e.IsDeleted)
                .HasDefaultValue(false);

            // Configure relationships
            entity.HasOne(d => d.Chat)
                .WithMany(p => p.ChatMessages)
                .HasForeignKey(d => d.ChatId)
                .OnDelete(DeleteBehavior.Cascade);

            entity.HasOne(d => d.Sender)
                .WithMany(p => p.SentMessages)
                .HasForeignKey(d => d.SenderId)
                .OnDelete(DeleteBehavior.Restrict);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}