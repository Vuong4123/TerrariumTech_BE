// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;

namespace TerrariumGardenTech.Repositories.Entity;

public partial class TerrariumGardenTechDBContext : DbContext
{
    public TerrariumGardenTechDBContext(DbContextOptions<TerrariumGardenTechDBContext> options)
        : base(options)
    {
    }
    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        if (!optionsBuilder.IsConfigured)
        {
            optionsBuilder.UseSqlServer(GetConnectionString());
        }
    }

    private string GetConnectionString()
    {
        IConfiguration configuration = new ConfigurationBuilder()
                .SetBasePath(Directory.GetCurrentDirectory())
                .AddJsonFile("appsettings.json", true, true).Build();
        return configuration["ConnectionStrings:DefaultConnectionString"];
    }
    public virtual DbSet<Accessory> Accessories { get; set; }

    public virtual DbSet<AccessoryImage> AccessoryImages { get; set; }

    public virtual DbSet<Address> Addresses { get; set; }

    public virtual DbSet<AddressDelivery> AddressDeliveries { get; set; }

    public virtual DbSet<AiSuggestLayout> AiSuggestLayouts { get; set; }

    public virtual DbSet<Blog> Blogs { get; set; }

    public virtual DbSet<BlogCategory> BlogCategories { get; set; }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<Feedback> Feedbacks { get; set; }

    public virtual DbSet<FeedbackImage> FeedbackImages { get; set; }

    public virtual DbSet<LayoutTerrarium> LayoutTerraria { get; set; }

    public virtual DbSet<Membership> Memberships { get; set; }

    public virtual DbSet<Notification> Notifications { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<OrderItem> OrderItems { get; set; }

    public virtual DbSet<OrderItemDetail> OrderItemDetails { get; set; }

    public virtual DbSet<PaymentTransaction> PaymentTransactions { get; set; }

    public virtual DbSet<Personalize> Personalizes { get; set; }

    public virtual DbSet<Promotion> Promotions { get; set; }

    public virtual DbSet<PromotionTerrariumVariant> PromotionTerrariumVariants { get; set; }

    public virtual DbSet<ReturnExchangeRequest> ReturnExchangeRequests { get; set; }

    public virtual DbSet<ReturnExchangeRequestItem> ReturnExchangeRequestItems { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Terrarium> Terraria { get; set; }

    public virtual DbSet<TerrariumCategory> TerrariumCategories { get; set; }

    public virtual DbSet<TerrariumImage> TerrariumImages { get; set; }

    public virtual DbSet<TerrariumVariant> TerrariumVariants { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<Voucher> Vouchers { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Accessory>(entity =>
        {
            entity.HasKey(e => e.AccessoryId).HasName("PK__Accessor__09C3F0FB38EAD82B");

            entity.ToTable("Accessory");

            entity.Property(e => e.AccessoryId).HasColumnName("AccessoryID");
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(sysdatetime())");
            entity.Property(e => e.Description).HasColumnType("text");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("Available");
            entity.Property(e => e.UpdatedAt).HasDefaultValueSql("(sysdatetime())");

            entity.HasOne(d => d.Category).WithMany(p => p.Accessories)
                .HasForeignKey(d => d.CategoryId)
                .HasConstraintName("FK_Accessory_Category");
        });

        modelBuilder.Entity<AccessoryImage>(entity =>
        {
            entity.HasKey(e => e.ImageId).HasName("PK__Accessor__7516F4ECAF008109");

            entity.ToTable("AccessoryImage");

            entity.Property(e => e.ImageId).HasColumnName("ImageID");
            entity.Property(e => e.AccessoryId).HasColumnName("AccessoryID");
            entity.Property(e => e.ImageUrl)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ImageURL");
            entity.Property(e => e.IsPrimary).HasDefaultValue(false);

            entity.HasOne(d => d.Accessory).WithMany(p => p.AccessoryImages)
                .HasForeignKey(d => d.AccessoryId)
                .HasConstraintName("FK_AccessoryImage_Accessory");
        });

        modelBuilder.Entity<Address>(entity =>
        {
            entity.HasKey(e => e.AddressId).HasName("PK__Address__091C2A1BF92DCEB3");

            entity.ToTable("Address");

            entity.Property(e => e.AddressId).HasColumnName("AddressID");
            entity.Property(e => e.AddressLine)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Country)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IsDefault).HasDefaultValue(false);
            entity.Property(e => e.PostalCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.User).WithMany(p => p.Addresses)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_Address_User");
        });

        modelBuilder.Entity<AddressDelivery>(entity =>
        {
            entity.HasKey(e => e.AddressDeliveryId).HasName("PK__AddressD__B9EF3DE7FBABE0E5");

            entity.ToTable("AddressDelivery");

            entity.Property(e => e.AddressDeliveryId).HasColumnName("AddressDeliveryID");
            entity.Property(e => e.AddressLine)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Country)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.PostalCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReceiverName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ReceiverPhone)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Order).WithMany(p => p.AddressDeliveries)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK_AddressDelivery_Order");
        });

        modelBuilder.Entity<AiSuggestLayout>(entity =>
        {
            entity.HasKey(e => e.SuggestionId).HasName("PK__AI_Sugge__94099528F42E8F79");

            entity.ToTable("AI_Suggest_layout");

            entity.Property(e => e.SuggestionId).HasColumnName("SuggestionID");
            entity.Property(e => e.ConfidenceScore).HasColumnType("decimal(3, 2)");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(sysdatetime())");
            entity.Property(e => e.LayoutId).HasColumnName("LayoutID");
            entity.Property(e => e.PersonalizeId).HasColumnName("PersonalizeID");
            entity.Property(e => e.SuggestionDetails).HasColumnType("text");
            entity.Property(e => e.TerrariumId).HasColumnName("TerrariumID");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.Layout).WithMany(p => p.AiSuggestLayouts)
                .HasForeignKey(d => d.LayoutId)
                .HasConstraintName("FK_AISuggestLayout_Layout");

            entity.HasOne(d => d.Personalize).WithMany(p => p.AiSuggestLayouts)
                .HasForeignKey(d => d.PersonalizeId)
                .HasConstraintName("FK_AISuggestLayout_Personalize");

            entity.HasOne(d => d.Terrarium).WithMany(p => p.AiSuggestLayouts)
                .HasForeignKey(d => d.TerrariumId)
                .HasConstraintName("FK_AISuggestLayout_Terrarium");

            entity.HasOne(d => d.User).WithMany(p => p.AiSuggestLayouts)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_AISuggestLayout_User");
        });

        modelBuilder.Entity<Blog>(entity =>
        {
            entity.HasKey(e => e.BlogId).HasName("PK__Blog__54379E502BA7CBDF");

            entity.ToTable("Blog");

            entity.Property(e => e.BlogId).HasColumnName("BlogID");
            entity.Property(e => e.AuthorId).HasColumnName("AuthorID");
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.Content)
                .IsRequired()
                .HasColumnType("text");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(sysdatetime())");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("Draft");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedAt).HasDefaultValueSql("(sysdatetime())");
            entity.Property(e => e.Views).HasDefaultValue(0);

            entity.HasOne(d => d.Author).WithMany(p => p.Blogs)
                .HasForeignKey(d => d.AuthorId)
                .HasConstraintName("FK_Blog_Author");

            entity.HasOne(d => d.Category).WithMany(p => p.Blogs)
                .HasForeignKey(d => d.CategoryId)
                .HasConstraintName("FK_Blog_Category");
        });

        modelBuilder.Entity<BlogCategory>(entity =>
        {
            entity.HasKey(e => e.CategoryId).HasName("PK__BlogCate__19093A2BF44DABA5");

            entity.ToTable("BlogCategory");

            entity.HasIndex(e => e.CategoryName, "UQ__BlogCate__8517B2E0E00A5B98").IsUnique();

            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.CategoryName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Description).HasColumnType("text");
        });

        modelBuilder.Entity<Category>(entity =>
        {
            entity.HasKey(e => e.CategoryId).HasName("PK__Category__19093A2B86C3C650");

            entity.ToTable("Category");

            entity.HasIndex(e => e.CategoryName, "UQ__Category__8517B2E0B94E9AF8").IsUnique();

            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.CategoryName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Description).HasColumnType("text");
        });

        modelBuilder.Entity<Feedback>(entity =>
        {
            entity.HasKey(e => e.FeedbackId).HasName("PK__Feedback__6A4BEDF6B087FA8A");

            entity.ToTable("Feedback");

            entity.Property(e => e.FeedbackId).HasColumnName("FeedbackID");
            entity.Property(e => e.Comment).HasColumnType("text");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(sysdatetime())");
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.Order).WithMany(p => p.Feedbacks)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK_Feedback_Order");

            entity.HasOne(d => d.User).WithMany(p => p.Feedbacks)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_Feedback_User");
        });

        modelBuilder.Entity<FeedbackImage>(entity =>
        {
            entity.HasKey(e => e.ImageId).HasName("PK__Feedback__7516F4EC21E46389");

            entity.ToTable("FeedbackImage");

            entity.Property(e => e.ImageId).HasColumnName("ImageID");
            entity.Property(e => e.FeedbackId).HasColumnName("FeedbackID");
            entity.Property(e => e.ImageUrl)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ImageURL");
            entity.Property(e => e.UploadedAt).HasDefaultValueSql("(sysdatetime())");

            entity.HasOne(d => d.Feedback).WithMany(p => p.FeedbackImages)
                .HasForeignKey(d => d.FeedbackId)
                .HasConstraintName("FK_FeedbackImage_Feedback");
        });

        modelBuilder.Entity<LayoutTerrarium>(entity =>
        {
            entity.HasKey(e => e.LayoutId).HasName("PK__LayoutTe__203586F5F03DC2A1");

            entity.ToTable("LayoutTerrarium");

            entity.Property(e => e.LayoutId).HasColumnName("LayoutID");
            entity.Property(e => e.Description).HasColumnType("text");
            entity.Property(e => e.ImageUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ImageURL");
            entity.Property(e => e.LayoutName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TerrariumId).HasColumnName("TerrariumID");

            entity.HasOne(d => d.Terrarium).WithMany(p => p.LayoutTerraria)
                .HasForeignKey(d => d.TerrariumId)
                .HasConstraintName("FK_LayoutTerrarium_Terrarium");
        });

        modelBuilder.Entity<Membership>(entity =>
        {
            entity.HasKey(e => e.MembershipId).HasName("PK__Membersh__92A78599235A7BAA");

            entity.ToTable("Membership");

            entity.Property(e => e.MembershipId).HasColumnName("MembershipID");
            entity.Property(e => e.EndDate).HasColumnType("date");
            entity.Property(e => e.MembershipType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StartDate).HasColumnType("date");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("Active");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.User).WithMany(p => p.Memberships)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_Membership_User");
        });

        modelBuilder.Entity<Notification>(entity =>
        {
            entity.HasKey(e => e.NotificationId).HasName("PK__Notifica__20CF2E32142A501D");

            entity.ToTable("Notification");

            entity.Property(e => e.NotificationId).HasColumnName("NotificationID");
            entity.Property(e => e.Content)
                .IsRequired()
                .HasColumnType("text");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(sysdatetime())");
            entity.Property(e => e.IsRead).HasDefaultValue(false);
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.User).WithMany(p => p.Notifications)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_Notification_User");
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.HasKey(e => e.OrderId).HasName("PK__Order__C3905BAFC3D2CC65");

            entity.ToTable("Order");

            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.AddressDeliveryId).HasColumnName("AddressDeliveryID");
            entity.Property(e => e.OrderDate).HasDefaultValueSql("(sysdatetime())");
            entity.Property(e => e.PaymentMethod)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ShippingFee).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("Pending");
            entity.Property(e => e.TotalAmount).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.VoucherId).HasColumnName("VoucherID");

            entity.HasOne(d => d.AddressDelivery).WithMany(p => p.Orders)
                .HasForeignKey(d => d.AddressDeliveryId)
                .HasConstraintName("FK_Order_AddressDelivery");

            entity.HasOne(d => d.User).WithMany(p => p.Orders)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_Order_User");

            entity.HasOne(d => d.Voucher).WithMany(p => p.Orders)
                .HasForeignKey(d => d.VoucherId)
                .HasConstraintName("FK_Order_Voucher");
        });

        modelBuilder.Entity<OrderItem>(entity =>
        {
            entity.HasKey(e => e.OrderItemId).HasName("PK__OrderIte__57ED06A12B600054");

            entity.ToTable("OrderItem");

            entity.Property(e => e.OrderItemId).HasColumnName("OrderItemID");
            entity.Property(e => e.AccessoryId).HasColumnName("AccessoryID");
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.SubTotal).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.TerrariumId).HasColumnName("TerrariumID");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.Accessory).WithMany(p => p.OrderItems)
                .HasForeignKey(d => d.AccessoryId)
                .HasConstraintName("FK_OrderItem_Accessory");

            entity.HasOne(d => d.Order).WithMany(p => p.OrderItems)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK_OrderItem_Order");

            entity.HasOne(d => d.Terrarium).WithMany(p => p.OrderItems)
                .HasForeignKey(d => d.TerrariumId)
                .HasConstraintName("FK_OrderItem_Terrarium");
        });

        modelBuilder.Entity<OrderItemDetail>(entity =>
        {
            entity.HasKey(e => e.DetailId).HasName("PK__OrderIte__135C314DE1F3A820");

            entity.ToTable("OrderItemDetail");

            entity.Property(e => e.DetailId).HasColumnName("DetailID");
            entity.Property(e => e.CustomDetails).HasColumnType("text");
            entity.Property(e => e.OrderItemId).HasColumnName("OrderItemID");
            entity.Property(e => e.TerrariumVariantId).HasColumnName("TerrariumVariantID");

            entity.HasOne(d => d.OrderItem).WithMany(p => p.OrderItemDetails)
                .HasForeignKey(d => d.OrderItemId)
                .HasConstraintName("FK_OrderItemDetail_OrderItem");

            entity.HasOne(d => d.TerrariumVariant).WithMany(p => p.OrderItemDetails)
                .HasForeignKey(d => d.TerrariumVariantId)
                .HasConstraintName("FK_OrderItemDetail_TerrariumVariant");
        });

        modelBuilder.Entity<PaymentTransaction>(entity =>
        {
            entity.HasKey(e => e.TransactionId).HasName("PK__PaymentT__55433A4BDD072382");

            entity.ToTable("PaymentTransaction");

            entity.Property(e => e.TransactionId).HasColumnName("TransactionID");
            entity.Property(e => e.Amount).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.GatewayResponse).HasColumnType("text");
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.PaymentMethod)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("Pending");
            entity.Property(e => e.TransactionDate).HasDefaultValueSql("(sysdatetime())");

            entity.HasOne(d => d.Order).WithMany(p => p.PaymentTransactions)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK_PaymentTransaction_Order");
        });

        modelBuilder.Entity<Personalize>(entity =>
        {
            entity.HasKey(e => e.PersonalizeId).HasName("PK__Personal__DBBD5673F3E16B6F");

            entity.ToTable("Personalize");

            entity.Property(e => e.PersonalizeId).HasColumnName("PersonalizeID");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(sysdatetime())");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.PreferenceType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PreferenceValue).HasColumnType("text");
            entity.Property(e => e.UpdatedAt).HasDefaultValueSql("(sysdatetime())");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.User).WithMany(p => p.Personalizes)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_Personalize_User");
        });

        modelBuilder.Entity<Promotion>(entity =>
        {
            entity.HasKey(e => e.PromotionId).HasName("PK__Promotio__52C42F2FD54A967A");

            entity.ToTable("Promotion");

            entity.Property(e => e.PromotionId).HasColumnName("PromotionID");
            entity.Property(e => e.Description).HasColumnType("text");
            entity.Property(e => e.DiscountType)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DiscountValue).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.EndDate).HasColumnType("date");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.StartDate).HasColumnType("date");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("Active");
        });

        modelBuilder.Entity<PromotionTerrariumVariant>(entity =>
        {
            entity.HasKey(e => e.PromotionVariantId).HasName("PK__Promotio__DE9C41969D4DBE21");

            entity.ToTable("PromotionTerrariumVariant");

            entity.Property(e => e.PromotionVariantId).HasColumnName("PromotionVariantID");
            entity.Property(e => e.PromotionId).HasColumnName("PromotionID");
            entity.Property(e => e.TerrariumVariantId).HasColumnName("TerrariumVariantID");

            entity.HasOne(d => d.Promotion).WithMany(p => p.PromotionTerrariumVariants)
                .HasForeignKey(d => d.PromotionId)
                .HasConstraintName("FK_PromotionTerrariumVariant_Promotion");

            entity.HasOne(d => d.TerrariumVariant).WithMany(p => p.PromotionTerrariumVariants)
                .HasForeignKey(d => d.TerrariumVariantId)
                .HasConstraintName("FK_PromotionTerrariumVariant_TerrariumVariant");
        });

        modelBuilder.Entity<ReturnExchangeRequest>(entity =>
        {
            entity.HasKey(e => e.RequestId).HasName("PK__ReturnEx__33A8519AFD4E3B66");

            entity.ToTable("ReturnExchangeRequest");

            entity.Property(e => e.RequestId).HasColumnName("RequestID");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(sysdatetime())");
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.Reason)
                .IsRequired()
                .HasColumnType("text");
            entity.Property(e => e.RequestType)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("Pending");
            entity.Property(e => e.UpdatedAt).HasDefaultValueSql("(sysdatetime())");

            entity.HasOne(d => d.Order).WithMany(p => p.ReturnExchangeRequests)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK_ReturnExchangeRequest_Order");
        });

        modelBuilder.Entity<ReturnExchangeRequestItem>(entity =>
        {
            entity.HasKey(e => e.RequestItemId).HasName("PK__ReturnEx__3F51AD77ECFB570D");

            entity.ToTable("ReturnExchangeRequestItem");

            entity.Property(e => e.RequestItemId).HasColumnName("RequestItemID");
            entity.Property(e => e.OrderItemId).HasColumnName("OrderItemID");
            entity.Property(e => e.Reason)
                .IsRequired()
                .HasColumnType("text");
            entity.Property(e => e.RequestId).HasColumnName("RequestID");

            entity.HasOne(d => d.OrderItem).WithMany(p => p.ReturnExchangeRequestItems)
                .HasForeignKey(d => d.OrderItemId)
                .HasConstraintName("FK_ReturnExchangeRequestItem_OrderItem");

            entity.HasOne(d => d.Request).WithMany(p => p.ReturnExchangeRequestItems)
                .HasForeignKey(d => d.RequestId)
                .HasConstraintName("FK_ReturnExchangeRequestItem_Request");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.RoleId).HasName("PK__Role__8AFACE3A731793A0");

            entity.ToTable("Role");

            entity.HasIndex(e => e.RoleName, "UQ__Role__8A2B6160AF8D5B74").IsUnique();

            entity.Property(e => e.RoleId).HasColumnName("RoleID");
            entity.Property(e => e.Description).HasColumnType("text");
            entity.Property(e => e.Permissions).HasColumnType("text");
            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Terrarium>(entity =>
        {
            entity.HasKey(e => e.TerrariumId).HasName("PK__Terrariu__B9CAABD6ACE8C14D");

            entity.ToTable("Terrarium");

            entity.Property(e => e.TerrariumId).HasColumnName("TerrariumID");
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(sysdatetime())");
            entity.Property(e => e.Description).HasColumnType("text");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("Available");
            entity.Property(e => e.UpdatedAt).HasDefaultValueSql("(sysdatetime())");

            entity.HasOne(d => d.Category).WithMany(p => p.Terraria)
                .HasForeignKey(d => d.CategoryId)
                .HasConstraintName("FK_Terrarium_Category");
        });

        modelBuilder.Entity<TerrariumCategory>(entity =>
        {
            entity.HasKey(e => e.CategoryId).HasName("PK__Terrariu__19093A2B95676CA8");

            entity.ToTable("TerrariumCategory");

            entity.HasIndex(e => e.CategoryName, "UQ__Terrariu__8517B2E0B7FA9DA6").IsUnique();

            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.CategoryName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Description).HasColumnType("text");
        });

        modelBuilder.Entity<TerrariumImage>(entity =>
        {
            entity.HasKey(e => e.ImageId).HasName("PK__Terrariu__7516F4EC97F3CE61");

            entity.ToTable("TerrariumImage");

            entity.Property(e => e.ImageId).HasColumnName("ImageID");
            entity.Property(e => e.ImageUrl)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ImageURL");
            entity.Property(e => e.IsPrimary).HasDefaultValue(false);
            entity.Property(e => e.TerrariumId).HasColumnName("TerrariumID");

            entity.HasOne(d => d.Terrarium).WithMany(p => p.TerrariumImages)
                .HasForeignKey(d => d.TerrariumId)
                .HasConstraintName("FK_TerrariumImage_Terrarium");
        });

        modelBuilder.Entity<TerrariumVariant>(entity =>
        {
            entity.HasKey(e => e.VariantId).HasName("PK__Terrariu__0EA233E4BCE6179D");

            entity.ToTable("TerrariumVariant");

            entity.Property(e => e.VariantId).HasColumnName("VariantID");
            entity.Property(e => e.Color)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PriceAdjustment).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Size)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TerrariumId).HasColumnName("TerrariumID");

            entity.HasOne(d => d.Terrarium).WithMany(p => p.TerrariumVariants)
                .HasForeignKey(d => d.TerrariumId)
                .HasConstraintName("FK_TerrariumVariant_Terrarium");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__User__1788CCAC362FB9B1");

            entity.ToTable("User");

            entity.HasIndex(e => e.Username, "UQ__User__536C85E45FFBE284").IsUnique();

            entity.HasIndex(e => e.Email, "UQ__User__A9D105343D45620C").IsUnique();

            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(sysdatetime())");
            entity.Property(e => e.DateOfBirth).HasColumnType("date");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FullName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Gender)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RoleId).HasColumnName("RoleID");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("Active");
            entity.Property(e => e.UpdatedAt).HasDefaultValueSql("(sysdatetime())");
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Role).WithMany(p => p.Users)
                .HasForeignKey(d => d.RoleId)
                .HasConstraintName("FK_User_Role");
        });

        modelBuilder.Entity<Voucher>(entity =>
        {
            entity.HasKey(e => e.VoucherId).HasName("PK__Voucher__3AEE79C1C81CEBFA");

            entity.ToTable("Voucher");

            entity.HasIndex(e => e.Code, "UQ__Voucher__A25C5AA72ACFB5E2").IsUnique();

            entity.Property(e => e.VoucherId).HasColumnName("VoucherID");
            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DiscountType)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DiscountValue).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.EndDate).HasColumnType("date");
            entity.Property(e => e.MaxDiscountValue).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.MinOrderValue).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.StartDate).HasColumnType("date");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("Active");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.User).WithMany(p => p.Vouchers)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_Voucher_User");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}