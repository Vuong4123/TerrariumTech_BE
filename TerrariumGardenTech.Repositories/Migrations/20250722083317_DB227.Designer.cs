// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TerrariumGardenTech.Repositories.Entity;

#nullable disable

namespace TerrariumGardenTech.Repositories.Migrations
{
    [DbContext(typeof(TerrariumGardenTechDBContext))]
    [Migration("20250722083317_DB227")]
    partial class DB227
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.Accessory", b =>
                {
                    b.Property<int>("AccessoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("accessoryId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccessoryId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("categoryId");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("name");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(12, 2)")
                        .HasColumnName("price");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Available")
                        .HasColumnName("status");

                    b.Property<int?>("StockQuantity")
                        .HasColumnType("int")
                        .HasColumnName("stockQuantity");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("updatedAt")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.HasKey("AccessoryId")
                        .HasName("PK__Accessor__77E65FD722D6ED59");

                    b.HasIndex("CategoryId");

                    b.ToTable("Accessory", (string)null);
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.AccessoryImage", b =>
                {
                    b.Property<int>("AccessoryImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("accessoryImageId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccessoryImageId"));

                    b.Property<int>("AccessoryId")
                        .HasColumnType("int")
                        .HasColumnName("accessoryId");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("imageUrl");

                    b.HasKey("AccessoryImageId")
                        .HasName("PK__Accessor__FC8A6368CD989764");

                    b.HasIndex("AccessoryId");

                    b.ToTable("AccessoryImage", (string)null);
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ReceiverAddress")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("receiverAddress");

                    b.Property<string>("ReceiverName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("receiverName");

                    b.Property<string>("ReceiverPhone")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("receiverPhone");

                    b.Property<string>("TagName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("tagName");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("PK_Address");

                    b.HasIndex("UserId");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.AddressDelivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("createdOnUtc");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<DateTime>("ModifiedOnUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("modifiedOnUtc");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("orderId");

                    b.Property<string>("ReceiverAddress")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("receiverAddress");

                    b.Property<string>("ReceiverName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("receiverName");

                    b.Property<string>("ReceiverPhone")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("receiverPhone");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("PK_AddressDelivery");

                    b.HasIndex("OrderId");

                    b.ToTable("AddressDelivery", (string)null);
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.AisuggestLayout", b =>
                {
                    b.Property<int>("LayoutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("layoutId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LayoutId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("LayoutData")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("layoutData");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("LayoutId")
                        .HasName("PK__AISugges__023A37EFFA219D01");

                    b.HasIndex("UserId");

                    b.ToTable("AISuggestLayout", (string)null);
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.Blog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("blogId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogId"));

                    b.Property<int>("BlogCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("blogCategoryId");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("draft")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("updatedAt")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("UrlImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.Property<string>("bodyHTML")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BlogId")
                        .HasName("PK__Blog__FA0AA72DCF7A4E3E");

                    b.HasIndex("BlogCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Blog", (string)null);
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.BlogCategory", b =>
                {
                    b.Property<int>("BlogCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("blogCategoryId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogCategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("categoryName");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.HasKey("BlogCategoryId")
                        .HasName("PK__BlogCate__60848B8FC9999236");

                    b.ToTable("BlogCategory", (string)null);
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CartId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.CartItem", b =>
                {
                    b.Property<int>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartItemId"));

                    b.Property<int?>("AccessoryId")
                        .HasColumnType("int");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("TerrariumVariantId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CartItemId");

                    b.HasIndex("AccessoryId");

                    b.HasIndex("CartId");

                    b.HasIndex("TerrariumVariantId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("categoryId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("CategoryId")
                        .HasName("PK__Category__23CAF1D819300390");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.EnvironmentTerrarium", b =>
                {
                    b.Property<int>("EnvironmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnvironmentId"));

                    b.Property<string>("EnvironmentDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnvironmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EnvironmentId");

                    b.ToTable("Environments");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("feedbackId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int")
                        .HasColumnName("orderItemId");

                    b.Property<int?>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("FeedbackId")
                        .HasName("PK__Feedback__2613FD244B84BCD6");

                    b.HasIndex("OrderItemId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.FeedbackImage", b =>
                {
                    b.Property<int>("FeedbackImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("feedbackImageId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackImageId"));

                    b.Property<string>("AltText")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("altText");

                    b.Property<int>("FeedbackId")
                        .HasColumnType("int")
                        .HasColumnName("feedbackId");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("imageUrl");

                    b.HasKey("FeedbackImageId")
                        .HasName("PK__Feedback__5C1F8F3456C39EF3");

                    b.HasIndex("FeedbackId");

                    b.ToTable("FeedbackImage", (string)null);
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.LayoutTerrarium", b =>
                {
                    b.Property<int>("LayoutTerrariumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("layoutTerrariumId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LayoutTerrariumId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("LayoutData")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("layoutData");

                    b.Property<int>("TerrariumVariantId")
                        .HasColumnType("int")
                        .HasColumnName("terrariumVariantId");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("updatedAt")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.HasKey("LayoutTerrariumId")
                        .HasName("PK__LayoutTe__ED2AF5EA0034035F");

                    b.HasIndex("TerrariumVariantId");

                    b.ToTable("LayoutTerrarium", (string)null);
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.Membership", b =>
                {
                    b.Property<int>("MembershipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MembershipId"));

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("MembershipId");

                    b.HasIndex("PackageId");

                    b.HasIndex("UserId");

                    b.ToTable("Memberships");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.MembershipPackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurationDays")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MembershipPackage");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("notificationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<bool?>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("isRead");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("message");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("title");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("NotificationId")
                        .HasName("PK__Notifica__4BA5CEA92CE3E468");

                    b.HasIndex("UserId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("orderId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<decimal?>("Deposit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(12, 2)")
                        .HasDefaultValue(0.00m)
                        .HasColumnName("deposit");

                    b.Property<DateTime?>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("orderDate")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("PaymentStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("pending")
                        .HasColumnName("paymentStatus");

                    b.Property<string>("ShippingStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("pending")
                        .HasColumnName("shippingStatus");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("pending")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(12, 2)")
                        .HasColumnName("totalAmount");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.Property<int?>("VoucherId")
                        .HasColumnType("int")
                        .HasColumnName("voucherId");

                    b.HasKey("OrderId")
                        .HasName("PK__Order__0809335D04D87A58");

                    b.HasIndex("UserId");

                    b.HasIndex("VoucherId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("orderItemId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"));

                    b.Property<int?>("AccessoryId")
                        .HasColumnType("int")
                        .HasColumnName("accessoryId");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("orderId");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<int?>("TerrariumVariantId")
                        .HasColumnType("int")
                        .HasColumnName("terrariumVariantId");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(12, 2)")
                        .HasColumnName("totalPrice");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(12, 2)")
                        .HasColumnName("unitPrice");

                    b.HasKey("OrderItemId")
                        .HasName("PK__OrderIte__3724BD5293DBCE99");

                    b.HasIndex("AccessoryId");

                    b.HasIndex("OrderId");

                    b.HasIndex("TerrariumVariantId");

                    b.ToTable("OrderItem", (string)null);
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.PaymentTransition", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("paymentId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("orderId");

                    b.Property<decimal?>("PaymentAmount")
                        .HasColumnType("decimal(12, 2)")
                        .HasColumnName("paymentAmount");

                    b.Property<DateTime?>("PaymentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("paymentDate")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("paymentMethod");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("pending")
                        .HasColumnName("status");

                    b.HasKey("PaymentId")
                        .HasName("PK__PaymentT__A0D9EFC6B78D0C95");

                    b.HasIndex("OrderId");

                    b.ToTable("PaymentTransition", (string)null);
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.Personalize", b =>
                {
                    b.Property<int>("PersonalizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonalizeId"));

                    b.Property<string>("Shape")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TankMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Theme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PersonalizeId");

                    b.HasIndex("UserId");

                    b.ToTable("Personalizes");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.Promotion", b =>
                {
                    b.Property<int>("PromotionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("promotionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PromotionId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("endDate");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("startDate");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValue("active")
                        .HasColumnName("status");

                    b.HasKey("PromotionId")
                        .HasName("PK__Promotio__99EB696ECA1EAF5F");

                    b.ToTable("Promotion", (string)null);
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.PromotionTerrariumVariant", b =>
                {
                    b.Property<int>("PromotionTerrariumVariantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("promotionTerrariumVariantId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PromotionTerrariumVariantId"));

                    b.Property<decimal?>("DiscountPercent")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("discountPercent");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("endDate");

                    b.Property<int>("PromotionId")
                        .HasColumnType("int")
                        .HasColumnName("promotionId");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("startDate");

                    b.Property<int>("TerrariumVariantId")
                        .HasColumnType("int")
                        .HasColumnName("terrariumVariantId");

                    b.HasKey("PromotionTerrariumVariantId")
                        .HasName("PK__Promotio__8F0EFF32523D8B83");

                    b.HasIndex("PromotionId");

                    b.HasIndex("TerrariumVariantId");

                    b.ToTable("PromotionTerrariumVariant", (string)null);
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.ReturnExchangeRequest", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("requestId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("orderId");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reason");

                    b.Property<DateTime?>("RequestDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("requestDate")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("pending")
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("RequestId")
                        .HasName("PK__ReturnEx__E3C5DE3141AB3D28");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("ReturnExchangeRequest", (string)null);
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.ReturnExchangeRequestItem", b =>
                {
                    b.Property<int>("RequestItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("requestItemId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestItemId"));

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("notes");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int")
                        .HasColumnName("orderItemId");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<int>("RequestId")
                        .HasColumnType("int")
                        .HasColumnName("requestId");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("pending")
                        .HasColumnName("status");

                    b.HasKey("RequestItemId")
                        .HasName("PK__ReturnEx__FDD6A58FF74806E9");

                    b.HasIndex("OrderItemId");

                    b.HasIndex("RequestId");

                    b.ToTable("ReturnExchangeRequestItem", (string)null);
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("roleId");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("roleName");

                    b.HasKey("RoleId")
                        .HasName("PK__Role__CD98462A2156B115");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.Shape", b =>
                {
                    b.Property<int>("ShapeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShapeId"));

                    b.Property<string>("ShapeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShapeMaterial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShapeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShapeId");

                    b.ToTable("Shapes");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.ShippingDetail", b =>
                {
                    b.Property<int>("ShippingDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("shippingDetailId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShippingDetailId"));

                    b.Property<DateTime?>("EstimatedDeliveryDate")
                        .HasColumnType("date")
                        .HasColumnName("estimatedDeliveryDate");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("orderId");

                    b.Property<decimal?>("ShippingCost")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("shippingCost");

                    b.Property<string>("ShippingMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("shippingMethod");

                    b.Property<string>("TrackingNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("trackingNumber");

                    b.HasKey("ShippingDetailId")
                        .HasName("PK__Shipping__DDF63975E50C620D");

                    b.HasIndex("OrderId");

                    b.ToTable("ShippingDetail", (string)null);
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.TankMethod", b =>
                {
                    b.Property<int>("TankMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TankMethodId"));

                    b.Property<string>("TankMethodDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TankMethodType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TankMethodId");

                    b.ToTable("TankMethods");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.Terrarium", b =>
                {
                    b.Property<int>("TerrariumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TerrariumId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EnvironmentId")
                        .HasColumnType("int");

                    b.Property<decimal?>("MaxPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MinPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ShapeId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<int>("TankMethodId")
                        .HasColumnType("int");

                    b.Property<string>("TerrariumName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("bodyHTML")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TerrariumId");

                    b.HasIndex("EnvironmentId");

                    b.HasIndex("ShapeId");

                    b.HasIndex("TankMethodId");

                    b.ToTable("Terrariums");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.TerrariumAccessory", b =>
                {
                    b.Property<int>("TerrariumAccessoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TerrariumAccessoryId"));

                    b.Property<int>("AccessoryId")
                        .HasColumnType("int");

                    b.Property<int>("TerrariumId")
                        .HasColumnType("int");

                    b.HasKey("TerrariumAccessoryId");

                    b.HasIndex("AccessoryId");

                    b.HasIndex("TerrariumId");

                    b.ToTable("TerrariumAccessory");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.TerrariumImage", b =>
                {
                    b.Property<int>("TerrariumImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("terrariumImageId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TerrariumImageId"));

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("imageUrl");

                    b.Property<int>("TerrariumId")
                        .HasColumnType("int")
                        .HasColumnName("terrariumId");

                    b.HasKey("TerrariumImageId")
                        .HasName("PK__Terrariu__38A555784432CBBE");

                    b.HasIndex("TerrariumId");

                    b.ToTable("TerrariumImage", (string)null);
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.TerrariumVariant", b =>
                {
                    b.Property<int>("TerrariumVariantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("terrariumVariantId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TerrariumVariantId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(12, 2)")
                        .HasColumnName("additionalPrice");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int")
                        .HasColumnName("stockQuantity");

                    b.Property<int>("TerrariumId")
                        .HasColumnType("int")
                        .HasColumnName("terrariumId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("VariantName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("variantName");

                    b.HasKey("TerrariumVariantId")
                        .HasName("PK__Terrariu__B9E43448C71265AD");

                    b.HasIndex("TerrariumId");

                    b.ToTable("TerrariumVariant", (string)null);
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("dateOfBirth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("EndToken")
                        .HasColumnType("datetime2")
                        .HasColumnName("endToken");

                    b.Property<string>("FullName")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("gender");

                    b.Property<string>("Otp")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("OtpExpiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("passwordHash");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("phoneNumber");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("refreshToken");

                    b.Property<DateTime?>("RefreshTokenExpiryDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("refreshTokenExpiryDate")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("roleId");

                    b.Property<DateTime?>("StartToken")
                        .HasColumnType("datetime2")
                        .HasColumnName("startToken");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValue("active")
                        .HasColumnName("status");

                    b.Property<string>("Token")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("token");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("updatedAt")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("username");

                    b.HasKey("UserId")
                        .HasName("PK__User__CB9A1CFFA89ED9C8");

                    b.HasIndex("RoleId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.Voucher", b =>
                {
                    b.Property<int>("VoucherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("voucherId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VoucherId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("discountAmount");

                    b.Property<decimal?>("DiscountPercent")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("discountPercent");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValue("active")
                        .HasColumnName("status");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("date")
                        .HasColumnName("validFrom");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("date")
                        .HasColumnName("validTo");

                    b.HasKey("VoucherId")
                        .HasName("PK__Voucher__F53389E9F60B1DB0");

                    b.ToTable("Voucher", (string)null);
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.Accessory", b =>
                {
                    b.HasOne("TerrariumGardenTech.Repositories.Entity.Category", "Category")
                        .WithMany("Accessories")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Accessory_Category");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.AccessoryImage", b =>
                {
                    b.HasOne("TerrariumGardenTech.Repositories.Entity.Accessory", "Accessory")
                        .WithMany("AccessoryImages")
                        .HasForeignKey("AccessoryId")
                        .IsRequired()
                        .HasConstraintName("FK_AccessoryImage_Accessory");

                    b.Navigation("Accessory");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.Address", b =>
                {
                    b.HasOne("TerrariumGardenTech.Repositories.Entity.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Address_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.AddressDelivery", b =>
                {
                    b.HasOne("TerrariumGardenTech.Repositories.Entity.Order", "Order")
                        .WithMany("AddressDeliveries")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AddressDelivery_Order");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.AisuggestLayout", b =>
                {
                    b.HasOne("TerrariumGardenTech.Repositories.Entity.User", "User")
                        .WithMany("AisuggestLayouts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_AISuggestLayout_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.Blog", b =>
                {
                    b.HasOne("TerrariumGardenTech.Repositories.Entity.BlogCategory", "BlogCategory")
                        .WithMany("Blogs")
                        .HasForeignKey("BlogCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Blog_BlogCategory");

                    b.HasOne("TerrariumGardenTech.Repositories.Entity.User", "User")
                        .WithMany("Blogs")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Blog_User");

                    b.Navigation("BlogCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.Cart", b =>
                {
                    b.HasOne("TerrariumGardenTech.Repositories.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.CartItem", b =>
                {
                    b.HasOne("TerrariumGardenTech.Repositories.Entity.Accessory", "Accessory")
                        .WithMany()
                        .HasForeignKey("AccessoryId");

                    b.HasOne("TerrariumGardenTech.Repositories.Entity.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TerrariumGardenTech.Repositories.Entity.TerrariumVariant", "TerrariumVariant")
                        .WithMany()
                        .HasForeignKey("TerrariumVariantId");

                    b.Navigation("Accessory");

                    b.Navigation("Cart");

                    b.Navigation("TerrariumVariant");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.Feedback", b =>
                {
                    b.HasOne("TerrariumGardenTech.Repositories.Entity.OrderItem", "OrderItem")
                        .WithMany("Feedbacks")
                        .HasForeignKey("OrderItemId")
                        .IsRequired()
                        .HasConstraintName("FK_Feedback_OrderItem");

                    b.HasOne("TerrariumGardenTech.Repositories.Entity.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Feedback_User");

                    b.Navigation("OrderItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.FeedbackImage", b =>
                {
                    b.HasOne("TerrariumGardenTech.Repositories.Entity.Feedback", "Feedback")
                        .WithMany("FeedbackImages")
                        .HasForeignKey("FeedbackId")
                        .IsRequired()
                        .HasConstraintName("FK_FeedbackImage_Feedback");

                    b.Navigation("Feedback");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.LayoutTerrarium", b =>
                {
                    b.HasOne("TerrariumGardenTech.Repositories.Entity.TerrariumVariant", "TerrariumVariant")
                        .WithMany("LayoutTerrarium")
                        .HasForeignKey("TerrariumVariantId")
                        .IsRequired()
                        .HasConstraintName("FK_LayoutTerrarium_TerrariumVariant");

                    b.Navigation("TerrariumVariant");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.Membership", b =>
                {
                    b.HasOne("TerrariumGardenTech.Repositories.Entity.MembershipPackage", "Package")
                        .WithMany("Memberships")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TerrariumGardenTech.Repositories.Entity.User", "User")
                        .WithMany("Memberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.Notification", b =>
                {
                    b.HasOne("TerrariumGardenTech.Repositories.Entity.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Notification_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.Order", b =>
                {
                    b.HasOne("TerrariumGardenTech.Repositories.Entity.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_User");

                    b.HasOne("TerrariumGardenTech.Repositories.Entity.Voucher", "Voucher")
                        .WithMany("Orders")
                        .HasForeignKey("VoucherId")
                        .HasConstraintName("FK_Order_Voucher");

                    b.Navigation("User");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.OrderItem", b =>
                {
                    b.HasOne("TerrariumGardenTech.Repositories.Entity.Accessory", "Accessory")
                        .WithMany("OrderItems")
                        .HasForeignKey("AccessoryId")
                        .HasConstraintName("FK_OrderItem_Accessory");

                    b.HasOne("TerrariumGardenTech.Repositories.Entity.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderItem_Order");

                    b.HasOne("TerrariumGardenTech.Repositories.Entity.TerrariumVariant", "TerrariumVariant")
                        .WithMany("OrderItems")
                        .HasForeignKey("TerrariumVariantId")
                        .HasConstraintName("FK_OrderItem_TerrariumVariant");

                    b.Navigation("Accessory");

                    b.Navigation("Order");

                    b.Navigation("TerrariumVariant");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.PaymentTransition", b =>
                {
                    b.HasOne("TerrariumGardenTech.Repositories.Entity.Order", "Order")
                        .WithMany("PaymentTransitions")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_PaymentTransition_Order");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.Personalize", b =>
                {
                    b.HasOne("TerrariumGardenTech.Repositories.Entity.User", "User")
                        .WithMany("Personalizes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.PromotionTerrariumVariant", b =>
                {
                    b.HasOne("TerrariumGardenTech.Repositories.Entity.Promotion", "Promotion")
                        .WithMany("PromotionTerrariumVariants")
                        .HasForeignKey("PromotionId")
                        .IsRequired()
                        .HasConstraintName("FK_PromotionTerrariumVariant_Promotion");

                    b.HasOne("TerrariumGardenTech.Repositories.Entity.TerrariumVariant", "TerrariumVariant")
                        .WithMany("PromotionTerrariumVariants")
                        .HasForeignKey("TerrariumVariantId")
                        .IsRequired()
                        .HasConstraintName("FK_PromotionTerrariumVariant_TerrariumVariant");

                    b.Navigation("Promotion");

                    b.Navigation("TerrariumVariant");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.ReturnExchangeRequest", b =>
                {
                    b.HasOne("TerrariumGardenTech.Repositories.Entity.Order", "Order")
                        .WithMany("ReturnExchangeRequests")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_ReturnExchangeRequest_Order");

                    b.HasOne("TerrariumGardenTech.Repositories.Entity.User", "User")
                        .WithMany("ReturnExchangeRequests")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_ReturnExchangeRequest_User");

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.ReturnExchangeRequestItem", b =>
                {
                    b.HasOne("TerrariumGardenTech.Repositories.Entity.OrderItem", "OrderItem")
                        .WithMany("ReturnExchangeRequestItems")
                        .HasForeignKey("OrderItemId")
                        .IsRequired()
                        .HasConstraintName("FK_ReturnExchangeRequestItem_OrderItem");

                    b.HasOne("TerrariumGardenTech.Repositories.Entity.ReturnExchangeRequest", "Request")
                        .WithMany("ReturnExchangeRequestItems")
                        .HasForeignKey("RequestId")
                        .IsRequired()
                        .HasConstraintName("FK_ReturnExchangeRequestItem_Request");

                    b.Navigation("OrderItem");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.ShippingDetail", b =>
                {
                    b.HasOne("TerrariumGardenTech.Repositories.Entity.Order", "Order")
                        .WithMany("ShippingDetails")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_ShippingDetail_Order");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.Terrarium", b =>
                {
                    b.HasOne("TerrariumGardenTech.Repositories.Entity.EnvironmentTerrarium", "Environment")
                        .WithMany("Terrarium")
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TerrariumGardenTech.Repositories.Entity.Shape", "Shapes")
                        .WithMany("Terrarium")
                        .HasForeignKey("ShapeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TerrariumGardenTech.Repositories.Entity.TankMethod", "TankMethods")
                        .WithMany("Terrarium")
                        .HasForeignKey("TankMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Environment");

                    b.Navigation("Shapes");

                    b.Navigation("TankMethods");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.TerrariumAccessory", b =>
                {
                    b.HasOne("TerrariumGardenTech.Repositories.Entity.Accessory", "Accessory")
                        .WithMany("TerrariumAccessory")
                        .HasForeignKey("AccessoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TerrariumGardenTech.Repositories.Entity.Terrarium", "Terrarium")
                        .WithMany("TerrariumAccessory")
                        .HasForeignKey("TerrariumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accessory");

                    b.Navigation("Terrarium");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.TerrariumImage", b =>
                {
                    b.HasOne("TerrariumGardenTech.Repositories.Entity.Terrarium", "Terrarium")
                        .WithMany("TerrariumImages")
                        .HasForeignKey("TerrariumId")
                        .IsRequired()
                        .HasConstraintName("FK_TerrariumImage_Terrarium");

                    b.Navigation("Terrarium");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.TerrariumVariant", b =>
                {
                    b.HasOne("TerrariumGardenTech.Repositories.Entity.Terrarium", "Terrarium")
                        .WithMany("TerrariumVariants")
                        .HasForeignKey("TerrariumId")
                        .IsRequired()
                        .HasConstraintName("FK_TerrariumVariant_Terrarium");

                    b.Navigation("Terrarium");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.User", b =>
                {
                    b.HasOne("TerrariumGardenTech.Repositories.Entity.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_User_Role");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.Accessory", b =>
                {
                    b.Navigation("AccessoryImages");

                    b.Navigation("OrderItems");

                    b.Navigation("TerrariumAccessory");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.BlogCategory", b =>
                {
                    b.Navigation("Blogs");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.Category", b =>
                {
                    b.Navigation("Accessories");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.EnvironmentTerrarium", b =>
                {
                    b.Navigation("Terrarium");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.Feedback", b =>
                {
                    b.Navigation("FeedbackImages");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.MembershipPackage", b =>
                {
                    b.Navigation("Memberships");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.Order", b =>
                {
                    b.Navigation("AddressDeliveries");

                    b.Navigation("OrderItems");

                    b.Navigation("PaymentTransitions");

                    b.Navigation("ReturnExchangeRequests");

                    b.Navigation("ShippingDetails");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.OrderItem", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("ReturnExchangeRequestItems");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.Promotion", b =>
                {
                    b.Navigation("PromotionTerrariumVariants");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.ReturnExchangeRequest", b =>
                {
                    b.Navigation("ReturnExchangeRequestItems");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.Shape", b =>
                {
                    b.Navigation("Terrarium");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.TankMethod", b =>
                {
                    b.Navigation("Terrarium");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.Terrarium", b =>
                {
                    b.Navigation("TerrariumAccessory");

                    b.Navigation("TerrariumImages");

                    b.Navigation("TerrariumVariants");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.TerrariumVariant", b =>
                {
                    b.Navigation("LayoutTerrarium");

                    b.Navigation("OrderItems");

                    b.Navigation("PromotionTerrariumVariants");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("AisuggestLayouts");

                    b.Navigation("Blogs");

                    b.Navigation("Feedbacks");

                    b.Navigation("Memberships");

                    b.Navigation("Notifications");

                    b.Navigation("Orders");

                    b.Navigation("Personalizes");

                    b.Navigation("ReturnExchangeRequests");
                });

            modelBuilder.Entity("TerrariumGardenTech.Repositories.Entity.Voucher", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
